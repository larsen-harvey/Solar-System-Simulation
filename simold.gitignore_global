# Important Notes:
# - All distances are in kilometers.
# - The gravitational constant (G) is defined in m^3 kg^-1 s^-2.
# - The Sun class defines the sun with mass and radius.
# - The Planet class defines planets using a data class.
# - The Moon class inherits from Planet.
# - The Asteroid class inherits from Planet.
# - The SolarSystem class manages the sun, planets, moons, and asteroids.
# - The main function sets up and simulates the solar system, then plots the results.
# - The simulation is 3D, lasts for 15 years, and includes animation.
# - Each planet is represented by a more realistic 3D model with textures.
# - Made by Harvey Larsen: for educational purposes only :D

import math
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation
from matplotlib import cm
from PIL import Image
from dataclasses import dataclass

# Close any existing plots
matplotlib.pyplot.close() # type: ignore
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Define the gravitational constant
G = 6.67430e-11  # in m^3 kg^-1 s^-2

# Define the Sun class
class Sun:
    def __init__(self, mass=1.989e30, radius=696000):  # radius in kilometers
        self.mass = mass
        self.radius = radius

# Define the Planet class using a data class
@dataclass
class Planet:
    name: str
    mass: float
    radius: float
    semi_major_axis: float
    eccentricity: float
    inclination: float
    longitude_of_ascending_node: float
    argument_of_periapsis: float
    mean_anomaly: float = 0
    texture: str = None  # type: ignore # Path to texture image
    x: float = 0  # x position in kilometers
    y: float = 0  # y position in kilometers
    z: float = 0  # z position in kilometers
    vx: float = 0.0  # Velocity in x direction
    vy: float = 0.0  # Velocity in y direction
    vz: float = 0.0  # Velocity in z direction

    AU = 1.496e8  # 1 AU in kilometers

    def calculate_orbital_period(self, sun_mass):
        """
        Calculate the orbital period of the planet.

        Parameters:
        sun_mass (float): The mass of the sun in kilograms.
        
        
        Returns:
        float: The orbital period of the planet in seconds.
        """
        T = 2 * math.pi * math.sqrt(self.semi_major_axis ** 3 / (G * sun_mass))
        return T

    def calculate_position(self, mean_anomaly):
        # Calculate the position of the planet in its elliptical orbit
        E = mean_anomaly + self.eccentricity * math.sin(mean_anomaly)  # Improved initial guess
        for _ in range(10):  # Iteratively solve Kepler's equation
            E_new = mean_anomaly + self.eccentricity * math.sin(E)
            if abs(E - E_new) < 1e-6:
                E = E_new
                break
        E = E_new
        x = self.semi_major_axis * (math.cos(E) - self.eccentricity)
        y = self.semi_major_axis * math.sqrt(1 - self.eccentricity**2) * math.sin(E)
        z = self.semi_major_axis * math.sin(self.inclination) * math.sin(E)
        return x, y, z
 
    def plot_model(self, ax, position, u, v):
        # Plot a more realistic sphere to represent the planet with texture
        x = self.radius * np.outer(np.cos(u), np.sin(v)) + position[0]
        y = self.radius * np.outer(np.sin(u), np.sin(v)) + position[1]
        z = self.radius * np.cos(v) + position[2]
        if self.texture:
            try:
                img = Image.open(self.texture)
            except FileNotFoundError:
                print(f"Texture file {self.texture} not found.")
                return
            img = np.array(img.resize((50, 25)))
            self.texture_img = img / 255
        ax.plot_surface(x, y, z, facecolors=cm.viridis(self.texture_img), rstride=1, cstride=1, linewidth=0, shade=True)

class Moon(Planet):
    """
    Represents a moon orbiting a planet in the solar system.

    Parameters:
    name (str): The name of the moon.
    mass (float): The mass of the moon in kilograms.
    radius (float): The radius of the moon in kilometers.
    semi_major_axis (float): The semi-major axis of the moon's orbit in kilometers.
    eccentricity (float): The eccentricity of the moon's orbit.
    inclination (float): The inclination of the moon's orbit in radians.
    longitude_of_ascending_node (float): The longitude of the ascending node in radians.
    argument_of_periapsis (float): The argument of periapsis in radians.
    parent_planet: str  # The name of the parent planet
    """
    def __init__(self, name, mass, radius, semi_major_axis, eccentricity, inclination, longitude_of_ascending_node, argument_of_periapsis, parent_planet, mean_anomaly=0, texture=None):
        super().__init__(name, mass, radius, semi_major_axis, eccentricity, inclination, longitude_of_ascending_node, argument_of_periapsis, mean_anomaly, texture)
        self.parent_planet = parent_planet
    mean_anomaly: float = 0
    
    texture: str = None  # Path to texture image
    

# Define the Asteroid class, inheriting from Planet
class Asteroid(Planet):
    """
    Represents an asteroid in the solar system.

    Parameters:
    name (str): The name of the asteroid.
    mass (float): The mass of the asteroid in kilograms.
    radius (float): The radius of the asteroid in kilometers.
    semi_major_axis (float): The semi-major axis of the asteroid's orbit in AU.
    eccentricity (float): The eccentricity of the asteroid's orbit.
    inclination (float): The inclination of the asteroid's orbit in radians.
    longitude_of_ascending_node (float): The longitude of the ascending node in radians.
    argument_of_periapsis (float): The argument of periapsis in radians.
    mean_anomaly (float): The mean anomaly of the asteroid in radians.
    texture (str): The path to the texture image for the asteroid.
    """
class SolarSystem:
    def __init__(self, sun=None):
        self.planets = []
        self.moons = []
        self.asteroids = []
        if sun is None:
            self.sun = Sun()
        else:
            self.sun = sun

    def add_moon(self, moon):
    # Add a moon to the solar system if it doesn't already exist
        if any(planet.name == moon.parent_planet for planet in self.planets):
                self.moons.append(moon)
        else:
            print(f"Parent planet {moon.parent_planet} not found for moon {moon.name}.")
    def add_asteroid(self, asteroid):
        if isinstance(asteroid, Asteroid) and asteroid.name not in [a.name for a in self.asteroids]:
            self.asteroids.append(asteroid)

    def calculate_orbital_characteristics(self, dt):
        # Calculate the orbital characteristics of each planet
        for i, planet in enumerate(self.planets):
            # Use the inclination directly from the planet's attribute
            inclination = planet.inclination

            # Calculate the eccentric anomaly from the mean anomaly
            eccentric_anomaly = planet.mean_anomaly
            for _ in range(10):  # Iteratively solve Kepler's equation
                eccentric_anomaly = planet.mean_anomaly + planet.eccentricity * math.sin(eccentric_anomaly)

            # Calculate the true anomaly from the eccentric anomaly
            # Calculate the true anomaly from the eccentric anomaly
            2 * math.atan2(math.sqrt(1 + planet.eccentricity) * math.sin(eccentric_anomaly / 2), math.sqrt(1 - planet.eccentricity) * math.cos(eccentric_anomaly / 2))
            # Calculate the orbital period
            T = (2 * math.pi) * math.sqrt((planet.semi_major_axis ** 3) / (G * self.sun.mass))
            # Update the mean anomaly considering the time step dt
            planet.mean_anomaly = (planet.mean_anomaly + 2 * math.pi * dt / T) % (2 * math.pi)

            # Print the orbital characteristics
            print(f"Planet {i+1}:")
            print(f"Name: {planet.name}")
            print(f"Mass: {planet.mass} kg")
            print(f"Radius: {planet.radius} km")
            print(f"Semi-major Axis: {planet.semi_major_axis} AU")
            print(f"Eccentricity: {planet.eccentricity}")
            print(f"Inclination: {inclination} rad")
            print(f"Longitude of Ascending Node: {planet.longitude_of_ascending_node} rad")
            print(f"Argument of Periapsis: {planet.argument_of_periapsis} rad")
            print(f"Orbital Period: {T / 86400} days")

    def calculate_gravitational_interactions(self, dt):
        positions = {planet.name: [] for planet in self.planets}
        # Calculate the gravitational interactions between planets
        for i, planet1 in enumerate(self.planets):
            force_x, force_y, force_z = 0, 0, 0
            for j, planet2 in enumerate(self.planets):
                if i != j:
                    x1, y1, z1 = planet1.calculate_position(planet1.mean_anomaly)
                    x2, y2, z2 = planet2.calculate_position(planet2.mean_anomaly)
                    r12 = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2)
                    F_g = (G * planet1.mass * planet2.mass) / (r12 ** 2)
                    force_x += F_g * (x2 - x1) / r12
                    force_y += F_g * (y2 - y1) / r12
                    force_z += F_g * (z2 - z1) / r12

            # Update velocities based on the net force
            planet1.vx += force_x / planet1.mass * dt
            planet1.vy += force_y / planet1.mass * dt
            planet1.vz += force_z / planet1.mass * dt

            # Update positions based on the velocities
            planet1.x += planet1.vx * dt
            planet1.y += planet1.vy * dt
            planet1.z += planet1.vz * dt

            # Print the gravitational interaction
        print(f"Planet {i+1} updated position: ({planet1.x}, {planet1.y}, {planet1.z})")
        positions[planet1.name].append((planet1.x, planet1.y, planet1.z))
        return positions

def main():
    """
    Main function to set up and simulate the solar system.
    It initializes the SolarSystem object, adds planets, moons, and asteroids,
    and then simulates their orbits over time. Finally, it plots the simulation results.
    """
    system = SolarSystem()

    # Planets with textures
    system.planets.append(Planet("Mercury", 3.3022e23, 2439.7, 0.387098 * Planet.AU, 0.2056, 0, math.pi/4, math.pi/4, texture="textures/mercury.jpg"))
    system.planets.append(Planet("Venus", 4.8695e24, 6051.8, 0.723336 * Planet.AU, 0.0068, math.pi/2, math.pi/4, 3*math.pi/4, texture="textures/venus.jpg"))
    system.planets.append(Planet("Earth", 5.972e24, 6371, 1.000 * Planet.AU, 0.0167, 0, 0, 0, texture="textures/earth.jpg"))
    system.planets.append(Planet("Mars", 6.4171e23, 3389.5, 1.524 * Planet.AU, 0.0934, 0, 0, 0, texture="textures/mars.jpg"))
    system.planets.append(Planet("Jupiter", 1.8982e27, 69911, 5.2044 * Planet.AU, 0.0489, 0, 0, 0, texture="textures/jupiter.jpg"))
    system.planets.append(Planet("Saturn", 5.6834e26, 58232, 9.5826 * Planet.AU, 0.0565, 0, 0, 0, texture="textures/saturn.jpg"))
    system.planets.append(Planet("Uranus", 8.6810e25, 25362, 19.2184 * Planet.AU, 0.046, 0, 0, 0, texture="textures/uranus.jpg"))
    system.planets.append(Planet("Neptune", 1.02413e26, 24622, 30.110387 * Planet.AU, 0.009, 0, 0, 0, texture="textures/neptune.jpg"))

    # Dwarf planets with textures
    system.planets.append(Planet("Pluto", 1.303e22, 1188.3, 39.482 * Planet.AU, 0.2488, 17.16, 110.299, 113.834, texture="textures/pluto.jpg"))
    system.planets.append(Planet("Haumea", 4.006e21, 816, 43.335 * Planet.AU, 0.191, 28.2, 121.8, 240.6, texture="textures/haumea.jpg"))
    system.planets.append(Planet("Makemake", 3.1e21, 715, 45.79 * Planet.AU, 0.159, 29.0, 79.0, 298.0, texture="textures/makemake.jpg"))
    system.planets.append(Planet("Eris", 1.66e22, 1163, 67.781 * Planet.AU, 0.44, 44.0, 35.9, 151.0, texture="textures/eris.jpg"))
    system.planets.append(Planet("Ceres", 9.393e20, 473, 2.77 * Planet.AU, 0.075, 10.6, 80.3, 73.6, texture="textures/ceres.jpg"))

    # Moons with textures
    # Earth
    system.add_moon(Moon("Moon", 7.342e22, 1737.1, 0.00257 * Planet.AU, 0.0549, 5.145, 0, 0, "Earth", texture="textures/moon.jpg"))
    # Mars
    system.add_moon(Moon("Phobos", 1.0659e16, 11.267, 9376, 0.0151, 1.093, 0, 0, "Mars", texture="textures/phobos.jpg"))
    system.add_moon(Moon("Deimos", 1.4762e15, 6.2, 23463.2, 0.0002, 0.93, 0, 0, "Mars", texture="textures/deimos.jpg"))
    # Jupiter
    system.add_moon(Moon("Io", 8.9319e22, 1821.6, 421700, 0.0041, 0.036, 0, 0, "Jupiter", texture="textures/io.jpg"))
    system.add_moon(Moon("Europa", 4.7998e22, 1560.8, 671034, 0.009, 0.466, 0, 0, "Jupiter", texture="textures/europa.jpg"))
    system.add_moon(Moon("Ganymede", 1.4819e23, 2634.1, 1070412, 0.0013, 0.177, 0, 0, "Jupiter", texture="textures/ganymede.jpg"))
    system.add_moon(Moon("Callisto", 1.0759e23, 2410.3, 1882709, 0.0074, 0.192, 0, 0, "Jupiter", texture="textures/callisto.jpg"))
    # Saturn
    system.add_moon(Moon("Titan", 1.3452e23, 2574.73, 1221870, 0.0288, 0.34854, 0, 0, "Saturn", texture="textures/titan.jpg"))
    system.add_moon(Moon("Rhea", 2.3065e21, 763.8, 527108, 0.001258, 0.345, 0, 0, "Saturn", texture="textures/rhea.jpg"))
    system.add_moon(Moon("Iapetus", 1.8056e21, 734.5, 3560820, 0.028612, 15.47, 0, 0, "Saturn", texture="textures/iapetus.jpg"))
    system.add_moon(Moon("Mimas", 3.7493e19, 198.2, 185539, 0.0196, 1.574, 0, 0, "Saturn", texture="textures/mimas.jpg"))
    system.add_moon(Moon("Enceladus", 1.08022e20, 252.1, 238042, 0.0047, 0.009, 0, 0, "Saturn", texture="textures/enceladus.jpg"))
    system.add_moon(Moon("Tethys", 6.17449e20, 531.1, 294619, 0.0001, 1.091, 0, 0, "Saturn", texture="textures/tethys.jpg"))
    system.add_moon(Moon("Dione", 1.095452e21, 561.4, 377396, 0.0022, 0.028, 0, 0, "Saturn", texture="textures/dione.jpg"))
    system.add_moon(Moon("Hyperion", 5.6e18, 135, 1481000, 0.0232, 0.568, 0, 0, "Saturn", texture="textures/hyperion.jpg"))
    system.add_moon(Moon("Phoebe", 8.292e18, 106.5, 12942000, 0.1634, 175.3, 0, 0, "Saturn", texture="textures/phoebe.jpg"))
    # Uranus
    system.add_moon(Moon("Titania", 3.527e21, 788.4, 435910, 0.0011, 0.340, 0, 0, "Uranus", texture="textures/titania.jpg"))
    system.add_moon(Moon("Oberon", 3.014e21, 761.4, 583520, 0.0014, 0.068, 0, 0, "Uranus", texture="textures/oberon.jpg"))
    system.add_moon(Moon("Ariel", 1.353e21, 578.9, 190900, 0.0012, 0.260, 0, 0, "Uranus", texture="textures/ariel.jpg"))
    system.add_moon(Moon("Umbriel", 1.172e21, 584.7, 266000, 0.0039, 0.128, 0, 0, "Uranus", texture="textures/umbriel.jpg"))
    system.add_moon(Moon("Miranda", 6.59e19, 235.8, 129900, 0.0013, 4.338, 0, 0, "Uranus", texture="textures/miranda.jpg"))
    # Neptune
    system.add_moon(Moon("Triton", 2.14e22, 1353.4, 354759, 0.000016, 157.37, 0, 0, "Neptune", texture="textures/triton.jpg"))
    system.add_moon(Moon("Nereid", 3.1e19, 170, 5513818, 0.7507, 7.090, 0, 0, "Neptune", texture="textures/nereid.jpg"))

    # Asteroids
    system.add_asteroid(Asteroid("Vesta", 2.59076e20, 262.7, 2.362 * Planet.AU, 0.089, 7.14, 103.8, 151.2))
    system.add_asteroid(Asteroid("Pallas", 2.11e20, 273, 2.773 * Planet.AU, 0.231, 34.8, 173, 310))
    system.add_asteroid(Asteroid("Hygiea", 8.67e19, 215, 3.139 * Planet.AU, 0.117, 3.83, 283.2, 312.2))
    system.add_asteroid(Asteroid("Eunomia", 3.12e19, 136, 2.643 * Planet.AU, 0.186, 11.74, 97.8, 293.0))
    system.add_asteroid(Asteroid("Psyche", 2.72e19, 113, 2.922 * Planet.AU, 0.140, 3.10, 150.2, 228.0))
    system.add_asteroid(Asteroid("Juno", 2.67e19, 117, 2.669 * Planet.AU, 0.257, 12.98, 169.8, 248.0))
    system.add_asteroid(Asteroid("Eros", 6.687e15, 16.84, 1.458 * Planet.AU, 0.223, 10.83, 304.3, 178.7))
    system.add_asteroid(Asteroid("Bennu", 7.329e10, 0.245, 1.126 * Planet.AU, 0.203, 6.034, 2.060, 101.703))
    system.add_asteroid(Asteroid("Ryugu", 4.5e11, 0.435, 1.189 * Planet.AU, 0.190, 5.883, 251.47, 211.44))

    def update(frame, positions, lines):
        for planet_name, line in lines.items():
            x, y, z = positions[planet_name][frame]
            line.set_data(x, y)
            line.set_3d_properties(z)
        return lines.values()
    
    def simulate_and_plot(system, time_steps=5475, dt=0.01):
        # Simulate the solar system
        positions = system.calculate_gravitational_interactions(dt)
        for _ in range(time_steps):
            fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
            
        for frame in range(time_steps):
                positions = system.calculate_gravitational_interactions(dt)
                system.calculate_orbital_characteristics(dt)
            
        lines = {planet.name: ax.plot([], [], [])[0] for planet in system.planets}
            
        u, v = np.mgrid[0:2*np.pi:50j, 0:np.pi:25j]
            
        for planet in system.planets:
                planet.plot_model(ax, (0, 0, 0), u, v)
            
        ani = FuncAnimation(fig, update, frames=time_steps, fargs=(positions, lines), blit=False)
        return ani

    ani = simulate_and_plot(system)
    ani.save('solar_system_simulation.mp4', writer='ffmpeg')
    plt.show()

if __name__ == "__main__":
    main()
